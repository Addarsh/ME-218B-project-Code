<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\BaseTarget.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\BaseTarget.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Mar 02 17:09:00 2016
<BR><P>
<H3>Maximum Stack Usage =        616 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RunCampaigningSM &rArr;  RunCampaigningSM (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[27]">Reset_Handler</a>
 <LI><a href="#[5d]">__user_initial_stackheap</a>
 <LI><a href="#[4]">NmiSR</a>
 <LI><a href="#[5]">FaultISR</a>
 <LI><a href="#[6]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[bb]">RunShooter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">RunShooter</a><BR>
 <LI><a href="#[b7]">RunFollowLine</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">RunFollowLine</a><BR>
 <LI><a href="#[1d]">RunCampaigningSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">RunCampaigningSM</a><BR>
 <LI><a href="#[b9]">RunCaptureStation</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">RunCaptureStation</a><BR>
 <LI><a href="#[c0]">RunSendBytesStatus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c0]">RunSendBytesStatus</a><BR>
 <LI><a href="#[19]">RunStatusPAC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">RunStatusPAC</a><BR>
 <LI><a href="#[d3]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">UARTCharPut</a><BR>
 <LI><a href="#[4]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NmiSR</a><BR>
 <LI><a href="#[5]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">FaultISR</a><BR>
 <LI><a href="#[6]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IntDefaultHandler</a><BR>
 <LI><a href="#[45]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">SysCtlDelay</a><BR>
 <LI><a href="#[44]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">Check4Keystroke</a> from eventcheckers.o(i.Check4Keystroke) referenced from es_checkevents.o(.constdata)
 <LI><a href="#[5]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">IRInputCapture</a> from init_all.o(i.IRInputCapture) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">ISRHallPC4</a> from init_all.o(i.ISRHallPC4) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">ISRHallPC6</a> from init_all.o(i.ISRHallPC6) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">ISRStatusPAC</a> from sendbytesstatus.o(i.ISRStatusPAC) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">ISRUltraResponse</a> from ultrasonic.o(i.ISRUltraResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1c]">InitCampaigningSM</a> from campaigning.o(i.InitCampaigningSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1a]">InitCannon</a> from cannon.o(i.InitCannon) referenced from es_framework.o(.constdata)
 <LI><a href="#[18]">InitStatusPAC</a> from statuspac.o(i.InitStatusPAC) referenced from es_framework.o(.constdata)
 <LI><a href="#[1e]">InitStrategySM</a> from strategy.o(i.InitStrategySM) referenced from es_framework.o(.constdata)
 <LI><a href="#[14]">InitTestHarnessService0</a> from testharnessservice0.o(i.InitTestHarnessService0) referenced from es_framework.o(.constdata)
 <LI><a href="#[16]">InitUltra</a> from ultrasonic.o(i.InitUltra) referenced from es_framework.o(.constdata)
 <LI><a href="#[20]">InitializeCamera</a> from camera.o(i.InitializeCamera) referenced from es_framework.o(.constdata)
 <LI><a href="#[6]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 104 times from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[24]">PostCampaigningSM</a> from campaigning.o(i.PostCampaigningSM) referenced 5 times from es_timers.o(.constdata)
 <LI><a href="#[25]">PostCannon</a> from cannon.o(i.PostCannon) referenced from es_timers.o(.constdata)
 <LI><a href="#[22]">PostStatusPAC</a> from statuspac.o(i.PostStatusPAC) referenced from es_timers.o(.constdata)
 <LI><a href="#[23]">PostStrategySM</a> from strategy.o(i.PostStrategySM) referenced 8 times from es_timers.o(.constdata)
 <LI><a href="#[26]">PostUltra</a> from ultrasonic.o(i.PostUltra) referenced from es_timers.o(.constdata)
 <LI><a href="#[27]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[21]">RunCamera</a> from camera.o(i.RunCamera) referenced from es_framework.o(.constdata)
 <LI><a href="#[1d]">RunCampaigningSM</a> from campaigning.o(i.RunCampaigningSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1b]">RunCannon</a> from cannon.o(i.RunCannon) referenced from es_framework.o(.constdata)
 <LI><a href="#[19]">RunStatusPAC</a> from statuspac.o(i.RunStatusPAC) referenced from es_framework.o(.constdata)
 <LI><a href="#[1f]">RunStrategySM</a> from strategy.o(i.RunStrategySM) referenced from es_framework.o(.constdata)
 <LI><a href="#[15]">RunTestHarnessService0</a> from testharnessservice0.o(i.RunTestHarnessService0) referenced from es_framework.o(.constdata)
 <LI><a href="#[17]">RunUltra</a> from ultrasonic.o(i.RunUltra) referenced from es_framework.o(.constdata)
 <LI><a href="#[9]">ShortTimerAHandler</a> from es_shorttimer.o(i.ShortTimerAHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">ShortTimerBHandler</a> from es_shorttimer.o(i.ShortTimerBHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">SysTickIntHandler</a> from es_port.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">WTimer3AISR</a> from camera.o(i.WTimer3AISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">WTimer3BISR</a> from camera.o(i.WTimer3BISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[11]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f1]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[f2]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[30]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[32]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[f4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[34]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[f5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[36]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[38]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[fc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[100]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[101]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[102]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[103]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[106]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[107]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[108]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[110]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[113]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[114]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[115]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a6]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[116]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[117]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[118]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[5d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[119]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInputCapture
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[59]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[49]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4c]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[4e]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11e]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[31]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[33]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[47]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[37]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[54]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[57]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[50]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[120]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[df]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[51]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[5f]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[61]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[62]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[52]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[53]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[63]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[a2]"></a>ADC_MultiInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, admulti.o(i.ADC_MultiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_MultiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeCamera
</UL>

<P><STRONG><a name="[b6]"></a>ADC_MultiRead</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, admulti.o(i.ADC_MultiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_MultiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCamera
</UL>

<P><STRONG><a name="[75]"></a>CPUgetPRIMASK_cpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, es_port.o(i.CPUgetPRIMASK_cpsid))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueLIFO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[76]"></a>CPUsetPRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_port.o(i.CPUsetPRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueLIFO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[13]"></a>Check4Keystroke</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eventcheckers.o(i.Check4Keystroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Check4Keystroke &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbhit
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ES_CheckUserEvents</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_checkevents.o(i.ES_CheckUserEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[74]"></a>ES_DeQueue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, es_queue.o(i.ES_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_RecallEvents
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[77]"></a>ES_EnQueueFIFO</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, es_queue.o(i.ES_EnQueueFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>

<P><STRONG><a name="[78]"></a>ES_EnQueueLIFO</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, es_queue.o(i.ES_EnQueueLIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_EnQueueLIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToServiceLIFO
</UL>

<P><STRONG><a name="[80]"></a>ES_GetMSBitSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, es_lookuptables.o(i.ES_GetMSBitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>

<P><STRONG><a name="[7b]"></a>ES_InitQueue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_queue.o(i.ES_InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[79]"></a>ES_Initialize</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, es_framework.o(i.ES_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_Initialize &rArr; ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_InitQueue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>ES_PostToService</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_framework.o(i.ES_PostToService))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUltra
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltra
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCamera
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCannon
</UL>

<P><STRONG><a name="[7d]"></a>ES_PostToServiceLIFO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_framework.o(i.ES_PostToServiceLIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_PostToServiceLIFO &rArr; ES_EnQueueLIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueLIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_RecallEvents
</UL>

<P><STRONG><a name="[7e]"></a>ES_RecallEvents</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, es_deferrecall.o(i.ES_RecallEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ES_RecallEvents &rArr; ES_PostToServiceLIFO &rArr; ES_EnQueueLIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToServiceLIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
</UL>

<P><STRONG><a name="[7f]"></a>ES_Run</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, es_framework.o(i.ES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ES_Run &rArr; _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>ES_ShortTimerInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, es_shorttimer.o(i.ES_ShortTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ES_ShortTimerInit &rArr; TimerConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltra
</UL>

<P><STRONG><a name="[87]"></a>ES_ShortTimerStart</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, es_shorttimer.o(i.ES_ShortTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ES_ShortTimerStart &rArr; ShortTimerBHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
</UL>

<P><STRONG><a name="[8c]"></a>ES_Timer_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_GetTime))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
</UL>

<P><STRONG><a name="[7a]"></a>ES_Timer_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[73]"></a>ES_Timer_InitTimer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFollowLine
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltra
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCannon
</UL>

<P><STRONG><a name="[8f]"></a>ES_Timer_Tick_Resp</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, es_timers.o(i.ES_Timer_Tick_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
</UL>

<P><STRONG><a name="[92]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[91]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[b0]"></a>GPIOPinConfigure</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[90]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
</UL>

<P><STRONG><a name="[93]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[94]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[a0]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTestHarnessService0
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
</UL>

<P><STRONG><a name="[95]"></a>GetLineCenter</STRONG> (Thumb, 492 bytes, Stack size 296 bytes, camera.o(i.GetLineCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GetLineCenter &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCamera
</UL>

<P><STRONG><a name="[d]"></a>IRInputCapture</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, init_all.o(i.IRInputCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IRInputCapture &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableIR
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMyColor
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ISRHallPC4</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, init_all.o(i.ISRHallPC4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ISRHallPC4 &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHall
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ISRHallPC6</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, init_all.o(i.ISRHallPC6))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ISRHallPC6 &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHall
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>ISRStatusPAC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sendbytesstatus.o(i.ISRStatusPAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ISRStatusPAC &rArr; PostStatusPAC &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ISRUltraResponse</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ultrasonic.o(i.ISRUltraResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ISRUltraResponse &rArr; PostUltra &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUltra
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>InitCampaigningSM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, campaigning.o(i.InitCampaigningSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = InitCampaigningSM &rArr; StartCampaigningSM &rArr; RunCampaigningSM &rArr;  RunCampaigningSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCampaigningSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>InitCannon</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cannon.o(i.InitCannon))
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>InitPWM</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, ultrasonic.o(i.InitPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = InitPWM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltra
</UL>

<P><STRONG><a name="[9c]"></a>InitPins</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, statuspac.o(i.InitPins))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStatusPAC
</UL>

<P><STRONG><a name="[18]"></a>InitStatusPAC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, statuspac.o(i.InitStatusPAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = InitStatusPAC &rArr; StartStatusPAC &rArr; RunStatusPAC &rArr;  RunStatusPAC (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatusPAC
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>InitStrategySM</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strategy.o(i.InitStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitStrategySM &rArr; initialize_all &rArr; PWM_TIVA_Init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPartySwitch
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHall
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>InitTestHarnessService0</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, testharnessservice0.o(i.InitTestHarnessService0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitTestHarnessService0 &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_InitQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>InitUltra</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ultrasonic.o(i.InitUltra))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = InitUltra &rArr; SetPWM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>InitializeCamera</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, camera.o(i.InitializeCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitializeCamera &rArr; PostCamera &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCamera
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>InitializeTimer</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, camera.o(i.InitializeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitializeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeCamera
</UL>

<P><STRONG><a name="[8a]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[a5]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[ab]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[ae]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[ac]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetPeriod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[b1]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[b2]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
</UL>

<P><STRONG><a name="[af]"></a>PWMSyncUpdate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.PWMSyncUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[a7]"></a>PWM_TIVA_Init</STRONG> (Thumb, 646 bytes, Stack size 32 bytes, pwm10tiva.o(i.PWM_TIVA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PWM_TIVA_Init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncUpdate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[ad]"></a>PWM_TIVA_SetDuty</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, pwm10tiva.o(i.PWM_TIVA_SetDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetPeriod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCameraServo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateClockwise
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCannon
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateCounterClockwise
</UL>

<P><STRONG><a name="[b3]"></a>PWM_TIVA_SetFreq</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pwm10tiva.o(i.PWM_TIVA_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM_TIVA_SetFreq &rArr; PWM_TIVA_SetPeriod &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[b4]"></a>PWM_TIVA_SetPeriod</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pwm10tiva.o(i.PWM_TIVA_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_TIVA_SetPeriod &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetFreq
</UL>

<P><STRONG><a name="[a4]"></a>PostCamera</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, camera.o(i.PostCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostCamera &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer3BISR
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer3AISR
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeCamera
</UL>

<P><STRONG><a name="[24]"></a>PostCampaigningSM</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, campaigning.o(i.PostCampaigningSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostCampaigningSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInputCapture
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>PostCannon</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cannon.o(i.PostCannon))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostCannon &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>PostStatusPAC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, statuspac.o(i.PostStatusPAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostStatusPAC &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRStatusPAC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>PostStrategySM</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strategy.o(i.PostStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC6
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCannon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>PostUltra</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ultrasonic.o(i.PostUltra))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PostUltra &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRUltraResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ProcessRequestResponse</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, capturestation.o(i.ProcessRequestResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessRequestResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
</UL>

<P><STRONG><a name="[c1]"></a>ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sendbytesstatus.o(i.ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
</UL>

<P><STRONG><a name="[66]"></a>ReturnLineCenter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, camera.o(i.ReturnLineCenter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[67]"></a>ReturnLineFound</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i.ReturnLineFound))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[21]"></a>RunCamera</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, camera.o(i.RunCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RunCamera &rArr; GetLineCenter &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCameraServo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCenter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>RunCampaigningSM</STRONG> (Thumb, 650 bytes, Stack size 120 bytes, campaigning.o(i.RunCampaigningSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunCampaigningSM &rArr;  RunCampaigningSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartShooter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFollowLine
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCaptureStation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCampaigningSM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>RunCannon</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, cannon.o(i.RunCannon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RunCannon &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>RunCaptureStation</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, capturestation.o(i.RunCaptureStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = RunCaptureStation &rArr;  RunCaptureStation (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isResponseReady
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRequestResponse
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCaptureStation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
</UL>

<P><STRONG><a name="[b7]"></a>RunFollowLine</STRONG> (Thumb, 374 bytes, Stack size 104 bytes, followline.o(i.RunFollowLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunFollowLine &rArr;  RunFollowLine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;querydistance
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnLineFound
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateCounterClockwise
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFollowLine
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>

<P><STRONG><a name="[c0]"></a>RunSendBytesStatus</STRONG> (Thumb, 580 bytes, Stack size 104 bytes, sendbytesstatus.o(i.RunSendBytesStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = RunSendBytesStatus &rArr;  RunSendBytesStatus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMyColor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBytesStatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
</UL>

<P><STRONG><a name="[bb]"></a>RunShooter</STRONG> (Thumb, 478 bytes, Stack size 104 bytes, activateshooter.o(i.RunShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = RunShooter &rArr;  RunShooter (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableIR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableIR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCannon
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_GetTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateCounterClockwise
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartShooter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>

<P><STRONG><a name="[19]"></a>RunStatusPAC</STRONG> (Thumb, 276 bytes, Stack size 112 bytes, statuspac.o(i.RunStatusPAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = RunStatusPAC &rArr;  RunStatusPAC (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBytesStatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatusPAC
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>RunStrategySM</STRONG> (Thumb, 1656 bytes, Stack size 64 bytes, strategy.o(i.RunStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = RunStrategySM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffLED
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDisplayLED
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateClockwise
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableHall
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableHall
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStatusPAC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCampaigningSM
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processQueryResponse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRBN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>RunTestHarnessService0</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, testharnessservice0.o(i.RunTestHarnessService0))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RunTestHarnessService0 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_RecallEvents
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueLIFO
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>RunUltra</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ultrasonic.o(i.RunUltra))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RunUltra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>SetPWM</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ultrasonic.o(i.SetPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SetPWM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltra
</UL>

<P><STRONG><a name="[9]"></a>ShortTimerAHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, es_shorttimer.o(i.ShortTimerAHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShortTimerAHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>ShortTimerBHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, es_shorttimer.o(i.ShortTimerBHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShortTimerBHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>StartCampaigningSM</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, campaigning.o(i.StartCampaigningSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = StartCampaigningSM &rArr; RunCampaigningSM &rArr;  RunCampaigningSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCampaigningSM
</UL>

<P><STRONG><a name="[ba]"></a>StartCaptureStation</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, capturestation.o(i.StartCaptureStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = StartCaptureStation &rArr; RunCaptureStation &rArr;  RunCaptureStation (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>

<P><STRONG><a name="[b8]"></a>StartFollowLine</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, followline.o(i.StartFollowLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = StartFollowLine &rArr; RunFollowLine &rArr;  RunFollowLine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>

<P><STRONG><a name="[c3]"></a>StartSendBytesStatus</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sendbytesstatus.o(i.StartSendBytesStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = StartSendBytesStatus &rArr; RunSendBytesStatus &rArr;  RunSendBytesStatus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
</UL>

<P><STRONG><a name="[bc]"></a>StartShooter</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, activateshooter.o(i.StartShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = StartShooter &rArr; RunShooter &rArr;  RunShooter (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
</UL>

<P><STRONG><a name="[9d]"></a>StartStatusPAC</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, statuspac.o(i.StartStatusPAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = StartStatusPAC &rArr; RunStatusPAC &rArr;  RunStatusPAC (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStatusPAC
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStatusPAC
</UL>

<P><STRONG><a name="[72]"></a>StopMotors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motordrive.o(i.StopMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopMotors &rArr; UpdatePWM &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[a9]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[cc]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[84]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
</UL>

<P><STRONG><a name="[d7]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[d6]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[7]"></a>SysTickIntHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i.SysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[cd]"></a>TERMIO_GetChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, termio.o(i.TERMIO_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[cf]"></a>TERMIO_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, termio.o(i.TERMIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TERMIO_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>TERMIO_PutChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, termio.o(i.TERMIO_PutChar))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[85]"></a>TimerConfigure</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
</UL>

<P><STRONG><a name="[8b]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[cb]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
</UL>

<P><STRONG><a name="[89]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[88]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[86]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
</UL>

<P><STRONG><a name="[d3]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>

<P><STRONG><a name="[d0]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[d1]"></a>UARTStdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[ce]"></a>UARTgetc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio.o(i.UARTgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>

<P><STRONG><a name="[6e]"></a>UpdatePWM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, motordrive.o(i.UpdatePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdatePWM &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCampaigningSM
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC6
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[e]"></a>WTimer3AISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, camera.o(i.WTimer3AISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WTimer3AISR &rArr; PostCamera &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCamera
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WTimer3BISR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, camera.o(i.WTimer3BISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WTimer3BISR &rArr; PostCamera &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCamera
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>WriteCameraServo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, servo.o(i.WriteCameraServo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteCameraServo &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCamera
</UL>

<P><STRONG><a name="[8d]"></a>_HW_GetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_port.o(i._HW_GetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_GetTime
</UL>

<P><STRONG><a name="[81]"></a>_HW_Process_Pending_Ints</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_port.o(i._HW_Process_Pending_Ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[8e]"></a>_HW_Timer_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, es_port.o(i._HW_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
</UL>

<P><STRONG><a name="[56]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[99]"></a>disableHall</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init_all.o(i.disableHall))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC6
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRHallPC4
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[98]"></a>disableIR</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init_all.o(i.disableIR))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInputCapture
</UL>

<P><STRONG><a name="[c5]"></a>enableHall</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, init_all.o(i.enableHall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enableHall
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[c2]"></a>enableIR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init_all.o(i.enableIR))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
</UL>

<P><STRONG><a name="[5b]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4d]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[11]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>getMyColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strategy.o(i.getMyColor))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInputCapture
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendBytesStatus
</UL>

<P><STRONG><a name="[9f]"></a>getPartySwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init_all.o(i.getPartySwitch))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[d8]"></a>getPeriodFromHall</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, init_all.o(i.getPeriodFromHall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getPeriodFromHall
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
</UL>

<P><STRONG><a name="[9e]"></a>initialize_all</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, init_all.o(i.initialize_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = initialize_all &rArr; PWM_TIVA_Init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHallInputPC6
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHallInputPC4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeSPI
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUltrasonic
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIRInputCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[be]"></a>isResponseReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, capturestation.o(i.isResponseReady))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCaptureStation
</UL>

<P><STRONG><a name="[64]"></a>kbhit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, termio.o(i.kbhit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6f]"></a>querydistance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ultrasonic.o(i.querydistance))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[c7]"></a>rotateClockwise</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motordrive.o(i.rotateClockwise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rotateClockwise &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[bf]"></a>rotateCounterClockwise</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motordrive.o(i.rotateCounterClockwise))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rotateCounterClockwise &rArr; PWM_TIVA_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TIVA_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
</UL>

<P><STRONG><a name="[c4]"></a>setDisplayLED</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, init_all.o(i.setDisplayLED))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[c6]"></a>turnOffLED</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init_all.o(i.turnOffLED))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[39]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRUltraResponse
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCenter
</UL>

<P><STRONG><a name="[e0]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[e3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e8]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
</UL>

<P><STRONG><a name="[e6]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[121]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRUltraResponse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCenter
</UL>

<P><STRONG><a name="[122]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[e7]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[123]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPollingStationCode
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISRUltraResponse
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCenter
</UL>

<P><STRONG><a name="[e9]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e2]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[e5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[ea]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[ec]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringStateFollowing
</UL>

<P><STRONG><a name="[ed]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[ee]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[35]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[124]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[125]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[e1]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>getPollingStationCode</STRONG> (Thumb, 756 bytes, Stack size 8 bytes, strategy.o(i.getPollingStationCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getPollingStationCode &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriodFromHall
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[ca]"></a>getRBN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strategy.o(i.getRBN))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[c9]"></a>processQueryResponse</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, strategy.o(i.processQueryResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = processQueryResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[dd]"></a>InitIRInputCapture</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, init_all.o(i.InitIRInputCapture))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[de]"></a>InitUltrasonic</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, init_all.o(i.InitUltrasonic))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[da]"></a>InitializeSPI</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, init_all.o(i.InitializeSPI))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[db]"></a>initHallInputPC4</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, init_all.o(i.initHallInputPC4))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[dc]"></a>initHallInputPC6</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, init_all.o(i.initHallInputPC6))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_all
</UL>

<P><STRONG><a name="[d4]"></a>ConvertAngle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, servo.o(i.ConvertAngle))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCameraServo
</UL>

<P><STRONG><a name="[65]"></a>DuringStateFollowing</STRONG> (Thumb, 1238 bytes, Stack size 96 bytes, followline.o(i.DuringStateFollowing))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DuringStateFollowing &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePWM
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotors
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;querydistance
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnLineFound
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnLineCenter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFollowLine
</UL>

<P><STRONG><a name="[4]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[e4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4f]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[12]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
